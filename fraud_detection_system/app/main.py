"""
API FastAPI para Detec√ß√£o de Fraudes em Tempo Real
===================================================
Este √© o m√≥dulo principal da API REST que exp√µe endpoints para
detec√ß√£o de fraudes em transa√ß√µes financeiras.

Endpoints principais:
- POST /predict: Analisa uma transa√ß√£o
- POST /predict/batch: Analisa m√∫ltiplas transa√ß√µes
- GET /user/{user_id}/history: Hist√≥rico do usu√°rio
- GET /health: Status de sa√∫de do sistema
- GET /metrics: M√©tricas Prometheus

Autor: Nat√°lia Barros
Data: 2025
"""

from fastapi import FastAPI, HTTPException, Request, Response
from fastapi.responses import JSONResponse, PlainTextResponse, HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
import time
import logging
from typing import List, Optional
from contextlib import asynccontextmanager
import os

from app.models import (
    Transaction, FraudPrediction, SystemHealth,
    BatchPredictionRequest, BatchPredictionResponse,
    UserHistory
)
from app.ml_model import FraudDetectionModel
from app.database import get_redis_client, close_redis_connection, RedisClient
from app.monitoring import (
    get_metrics_collector, get_prometheus_metrics,
    get_content_type, HealthChecker,
    log_prediction_result, log_api_request
)

# Importa endpoints empresariais
try:
    from app.enterprise_endpoints import router as enterprise_router
    ENTERPRISE_ENABLED = True
except ImportError:
    ENTERPRISE_ENABLED = False
    logger.warning("‚ö†Ô∏è Endpoints empresariais n√£o dispon√≠veis")

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# ==================== CICLO DE VIDA DA APLICA√á√ÉO ====================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gerencia o ciclo de vida da aplica√ß√£o (startup e shutdown)
    """
    # STARTUP
    logger.info("üöÄ Iniciando API de Detec√ß√£o de Fraudes...")

    try:
        # Inicializa Redis
        logger.info("üì° Conectando ao Redis...")
        app.state.redis_client = get_redis_client()

        # Inicializa e carrega o modelo ML
        logger.info("ü§ñ Carregando modelo de Machine Learning...")
        app.state.model = FraudDetectionModel(redis_client=app.state.redis_client)

        # Tenta carregar modelo treinado
        if app.state.model.load_model():
            logger.info("‚úÖ Modelo carregado com sucesso!")

            # Atualiza m√©tricas do modelo
            metrics_collector = get_metrics_collector()
            metrics_collector.set_model_info(
                version=app.state.model.model_version,
                trained_at=str(app.state.model.trained_at) if app.state.model.trained_at else None,
                features_count=len(app.state.model.feature_names) if app.state.model.feature_names else None
            )

            if app.state.model.metrics:
                metrics_collector.update_model_metrics(
                    accuracy=app.state.model.metrics.accuracy,
                    precision=app.state.model.metrics.precision,
                    recall=app.state.model.metrics.recall,
                    f1_score=app.state.model.metrics.f1_score
                )
        else:
            logger.warning("‚ö†Ô∏è Modelo n√£o encontrado. Execute o treinamento primeiro!")
            logger.warning("   Use: python training/train_model.py")

        # Inicializa coletor de m√©tricas
        app.state.metrics_collector = get_metrics_collector()

        # Atualiza status dos componentes
        health_status = HealthChecker.perform_full_health_check(
            model=app.state.model,
            redis_client=app.state.redis_client
        )

        logger.info("‚úÖ API iniciada com sucesso!")
        logger.info(f"   üìä Status dos componentes: {health_status}")

    except Exception as e:
        logger.error(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")
        raise

    yield  # Aplica√ß√£o roda aqui

    # SHUTDOWN
    logger.info("üëã Encerrando API de Detec√ß√£o de Fraudes...")

    try:
        # Fecha conex√£o com Redis
        close_redis_connection()
        logger.info("‚úÖ Conex√µes fechadas com sucesso!")

    except Exception as e:
        logger.error(f"‚ùå Erro ao encerrar aplica√ß√£o: {e}")


# ==================== APLICA√á√ÉO FASTAPI ====================

app = FastAPI(
    title="Sistema de Detec√ß√£o de Fraudes",
    description="""
    API REST para detec√ß√£o de fraudes em tempo real usando Machine Learning.

    ## Funcionalidades

    * **An√°lise de Transa√ß√µes**: Detecta fraudes com base em padr√µes comportamentais
    * **Hist√≥rico de Usu√°rios**: Consulta hist√≥rico e estat√≠sticas de transa√ß√µes
    * **Monitoramento**: M√©tricas Prometheus e health checks
    * **Cache Inteligente**: Redis para performance otimizada

    ## Como Usar

    1. Envie uma transa√ß√£o via POST /predict
    2. Receba an√°lise completa com probabilidade de fraude
    3. Tome a√ß√£o baseada no n√≠vel de risco retornado

    Desenvolvido por: Nat√°lia Barros
    """,
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS - Permite acesso de qualquer origem (configurar para produ√ß√£o)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Inclui routers empresariais se dispon√≠veis
if ENTERPRISE_ENABLED:
    app.include_router(enterprise_router)
    logger.info("‚úÖ Endpoints empresariais habilitados")


# ==================== TEMPLATES E ARQUIVOS EST√ÅTICOS ====================

# Initialize templates
templates = Jinja2Templates(directory="app/templates")

# Mount static files if directory exists
if os.path.exists("app/static"):
    app.mount("/static", StaticFiles(directory="app/static"), name="static")


# ==================== MIDDLEWARE ====================

@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    """
    Middleware que adiciona tempo de processamento ao header
    e registra m√©tricas de requisi√ß√µes
    """
    start_time = time.time()

    # Processa a requisi√ß√£o
    response = await call_next(request)

    # Calcula tempo de processamento
    process_time = time.time() - start_time
    process_time_ms = process_time * 1000

    # Adiciona header com tempo de processamento
    response.headers["X-Process-Time-Ms"] = str(process_time_ms)

    # Registra m√©tricas
    if hasattr(app.state, 'metrics_collector'):
        app.state.metrics_collector.record_http_request(
            method=request.method,
            endpoint=request.url.path,
            status_code=response.status_code,
            duration_seconds=process_time
        )

    # Log estruturado
    log_api_request(
        method=request.method,
        endpoint=request.url.path,
        status_code=response.status_code,
        duration_ms=process_time_ms
    )

    return response


# ==================== ENDPOINTS ====================

@app.get("/api", tags=["Info"])
@app.get("/api/info", tags=["Info"])
async def api_info():
    """
    Endpoint com informa√ß√µes da API (JSON)
    """
    return {
        "message": "API de Detec√ß√£o de Fraudes em Tempo Real",
        "version": "1.0.0",
        "status": "operational",
        "endpoints": {
            "web_interface": "/",
            "fraudguard_interface": "/fraudguard",
            "predict": "/predict",
            "batch_predict": "/predict/batch",
            "user_history": "/user/{user_id}/history",
            "health": "/health",
            "metrics": "/metrics",
            "docs": "/docs"
        },
        "author": "Nat√°lia Barros"
    }


@app.get("/", response_class=HTMLResponse, tags=["Web Interface"], include_in_schema=False)
@app.get("/fraudguard", response_class=HTMLResponse, tags=["Web Interface"])
async def fraudguard_interface(request: Request):
    """
    Serve the FraudGuard¬Æ Risk Solutions HTML interface

    Professional web interface with:
    - Corporate branding with modern design
    - Interactive demo form for fraud detection
    - Real-time analysis with /predict API integration
    - Statistics dashboard (99.7% accuracy, <50ms response time)
    - Mobile-responsive Bootstrap 5 layout
    """
    return templates.TemplateResponse("fraudguard.html", {"request": request})


@app.post("/predict", response_model=FraudPrediction, tags=["Predi√ß√µes"])
async def predict_fraud(transaction: Transaction) -> FraudPrediction:
    """
    Analisa uma transa√ß√£o e retorna predi√ß√£o de fraude

    ## Exemplo de Requisi√ß√£o

    ```json
    {
      "transaction_id": "tx_001",
      "user_id": "user_123",
      "amount": 1500.00,
      "merchant": "Loja Suspeita",
      "category": "electronics",
      "location": "S√£o Paulo, SP",
      "device": "device_mobile_001"
    }
    ```

    ## Resposta

    Retorna an√°lise completa com:
    - Probabilidade de fraude
    - N√≠vel de risco (low/medium/high)
    - Explica√ß√£o da decis√£o
    - Fatores de risco identificados
    - Recomenda√ß√µes de a√ß√£o
    """
    try:
        # Verifica se modelo est√° carregado
        if not app.state.model.is_loaded():
            raise HTTPException(
                status_code=503,
                detail="Modelo n√£o est√° carregado. Aguarde inicializa√ß√£o ou execute treinamento."
            )

        # Verifica cache primeiro
        cached_prediction = app.state.redis_client.get_cached_prediction(
            transaction.transaction_id
        )

        if cached_prediction:
            logger.info(f"üéØ Retornando predi√ß√£o do cache: {transaction.transaction_id}")
            return cached_prediction

        # Realiza predi√ß√£o
        prediction = app.state.model.predict(transaction)

        # Cacheia resultado
        app.state.redis_client.cache_prediction(
            transaction.transaction_id,
            prediction,
            ttl=3600  # 1 hora
        )

        # Salva transa√ß√£o no hist√≥rico
        app.state.redis_client.save_transaction(
            user_id=transaction.user_id,
            transaction=transaction,
            is_fraud=prediction.is_fraud
        )

        # Atualiza m√©tricas
        app.state.redis_client.increment_predictions_count()
        app.state.metrics_collector.record_prediction(
            is_fraud=prediction.is_fraud,
            fraud_probability=prediction.fraud_probability,
            processing_time_seconds=prediction.processing_time_ms / 1000
        )

        # Atualiza taxa de cache
        cache_hit_rate = app.state.redis_client.get_cache_hit_rate()
        app.state.metrics_collector.update_cache_metrics(cache_hit_rate)

        # Registra tempo de resposta
        app.state.redis_client.record_response_time(prediction.processing_time_ms)

        # Log estruturado
        log_prediction_result(
            transaction_id=transaction.transaction_id,
            is_fraud=prediction.is_fraud,
            fraud_probability=prediction.fraud_probability,
            processing_time_ms=prediction.processing_time_ms
        )

        return prediction

    except ValueError as e:
        logger.error(f"‚ùå Erro de valida√ß√£o: {e}")
        raise HTTPException(status_code=400, detail=str(e))

    except Exception as e:
        logger.error(f"‚ùå Erro ao processar predi√ß√£o: {e}")
        app.state.metrics_collector.record_error('prediction_error')
        raise HTTPException(
            status_code=500,
            detail=f"Erro interno ao processar predi√ß√£o: {str(e)}"
        )


@app.post("/predict/batch", response_model=BatchPredictionResponse, tags=["Predi√ß√µes"])
async def predict_batch(request: BatchPredictionRequest) -> BatchPredictionResponse:
    """
    Analisa m√∫ltiplas transa√ß√µes em lote

    ## Limite
    M√°ximo de 100 transa√ß√µes por requisi√ß√£o

    ## Retorno
    Lista com predi√ß√µes de todas as transa√ß√µes
    """
    try:
        if not app.state.model.is_loaded():
            raise HTTPException(
                status_code=503,
                detail="Modelo n√£o est√° carregado."
            )

        start_time = time.time()

        # Processa cada transa√ß√£o
        predictions = app.state.model.predict_batch(request.transactions)

        # Salva transa√ß√µes e atualiza m√©tricas
        fraud_count = 0
        for tx, pred in zip(request.transactions, predictions):
            # Salva no hist√≥rico
            app.state.redis_client.save_transaction(
                user_id=tx.user_id,
                transaction=tx,
                is_fraud=pred.is_fraud
            )

            # Conta fraudes
            if pred.is_fraud:
                fraud_count += 1

            # Atualiza m√©tricas
            app.state.metrics_collector.record_prediction(
                is_fraud=pred.is_fraud,
                fraud_probability=pred.fraud_probability,
                processing_time_seconds=pred.processing_time_ms / 1000
            )

        # Tempo total de processamento
        total_time_ms = (time.time() - start_time) * 1000

        # Incrementa contador total
        for _ in range(len(predictions)):
            app.state.redis_client.increment_predictions_count()

        logger.info(
            f"üì¶ Lote processado: {len(predictions)} transa√ß√µes | "
            f"{fraud_count} fraudes detectadas | "
            f"Tempo: {total_time_ms:.1f}ms"
        )

        return BatchPredictionResponse(
            total_transactions=len(predictions),
            fraud_detected=fraud_count,
            predictions=predictions,
            processing_time_ms=total_time_ms
        )

    except Exception as e:
        logger.error(f"‚ùå Erro ao processar lote: {e}")
        app.state.metrics_collector.record_error('batch_prediction_error')
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/user/{user_id}/history", response_model=UserHistory, tags=["Usu√°rios"])
async def get_user_history(user_id: str) -> UserHistory:
    """
    Recupera hist√≥rico e estat√≠sticas de um usu√°rio

    ## Informa√ß√µes Retornadas
    - Total de transa√ß√µes
    - Valor total transacionado
    - Taxa de fraude
    - Padr√µes de comportamento
    - Dispositivos conhecidos
    - Localiza√ß√µes e categorias mais comuns
    """
    try:
        history = app.state.redis_client.get_user_history(user_id)

        if history is None:
            raise HTTPException(
                status_code=404,
                detail=f"Usu√°rio {user_id} n√£o encontrado ou sem hist√≥rico"
            )

        logger.info(f"üìä Hist√≥rico recuperado para usu√°rio {user_id}")

        return history

    except HTTPException:
        raise

    except Exception as e:
        logger.error(f"‚ùå Erro ao recuperar hist√≥rico: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/health", response_model=SystemHealth, tags=["Monitoramento"])
async def health_check() -> SystemHealth:
    """
    Verifica status de sa√∫de do sistema

    ## Componentes Verificados
    - API
    - Modelo de ML
    - Redis

    ## M√©tricas Inclu√≠das
    - Total de predi√ß√µes
    - Taxa de acerto do cache
    - Tempo m√©dio de resposta
    """
    try:
        # Verifica status de todos os componentes
        health_status = HealthChecker.perform_full_health_check(
            model=app.state.model,
            redis_client=app.state.redis_client
        )

        # Determina status geral
        all_healthy = all(health_status.values())
        overall_status = "healthy" if all_healthy else "unhealthy"

        # Coleta m√©tricas
        total_predictions = app.state.redis_client.get_total_predictions()
        cache_hit_rate = app.state.redis_client.get_cache_hit_rate()
        avg_response_time = app.state.redis_client.get_average_response_time()

        # Informa√ß√µes do modelo
        model_accuracy = None
        last_training = None

        if app.state.model.metrics:
            model_accuracy = app.state.model.metrics.accuracy

        if app.state.model.trained_at:
            last_training = app.state.model.trained_at

        return SystemHealth(
            status=overall_status,
            api_status="operational" if health_status['api'] else "error",
            model_status="operational" if health_status['model'] else "error",
            redis_status="operational" if health_status['redis'] else "error",
            total_predictions=total_predictions,
            cache_hit_rate=cache_hit_rate,
            average_response_time_ms=avg_response_time,
            model_version=app.state.model.model_version,
            model_accuracy=model_accuracy,
            last_training_date=last_training
        )

    except Exception as e:
        logger.error(f"‚ùå Erro no health check: {e}")
        return SystemHealth(
            status="unhealthy",
            api_status="error",
            model_status="error",
            redis_status="error",
            total_predictions=0,
            cache_hit_rate=0.0,
            average_response_time_ms=0.0
        )


@app.get("/metrics", tags=["Monitoramento"])
async def metrics() -> Response:
    """
    Retorna m√©tricas no formato Prometheus

    ## Uso
    Configure seu Prometheus para fazer scraping deste endpoint:

    ```yaml
    scrape_configs:
      - job_name: 'fraud-detection'
        static_configs:
          - targets: ['localhost:8000']
        metrics_path: '/metrics'
    ```
    """
    try:
        # Atualiza taxa de cache antes de retornar m√©tricas
        cache_hit_rate = app.state.redis_client.get_cache_hit_rate()
        app.state.metrics_collector.update_cache_metrics(cache_hit_rate)

        # Gera m√©tricas Prometheus
        metrics_data = get_prometheus_metrics()

        return Response(
            content=metrics_data,
            media_type=get_content_type()
        )

    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar m√©tricas: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/stats", tags=["Monitoramento"])
async def get_stats():
    """
    Retorna estat√≠sticas gerais do sistema

    Endpoint adicional para visualiza√ß√£o r√°pida de m√©tricas
    """
    try:
        summary = app.state.metrics_collector.get_summary()

        return {
            **summary,
            "cache_hit_rate": app.state.redis_client.get_cache_hit_rate(),
            "total_predictions": app.state.redis_client.get_total_predictions(),
            "avg_response_time_ms": app.state.redis_client.get_average_response_time()
        }

    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar stats: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.delete("/cache/clear", tags=["Administra√ß√£o"])
async def clear_cache():
    """
    Limpa o cache de predi√ß√µes

    ‚ö†Ô∏è Use com cuidado em produ√ß√£o
    """
    try:
        success = app.state.redis_client.clear_cache()

        if success:
            return {"message": "Cache limpo com sucesso", "status": "success"}
        else:
            raise HTTPException(status_code=500, detail="Erro ao limpar cache")

    except Exception as e:
        logger.error(f"‚ùå Erro ao limpar cache: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# ==================== TRATAMENTO DE ERROS ====================

@app.exception_handler(ValueError)
async def value_error_handler(request: Request, exc: ValueError):
    """Trata erros de valida√ß√£o"""
    return JSONResponse(
        status_code=400,
        content={"detail": str(exc), "type": "validation_error"}
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """Trata erros gerais"""
    logger.error(f"‚ùå Erro n√£o tratado: {exc}")
    app.state.metrics_collector.record_error('unhandled_error')

    return JSONResponse(
        status_code=500,
        content={
            "detail": "Erro interno do servidor",
            "type": "internal_error"
        }
    )


# ==================== INICIALIZA√á√ÉO ====================

if __name__ == "__main__":
    import uvicorn

    print("=" * 70)
    print("üöÄ INICIANDO API DE DETEC√á√ÉO DE FRAUDES")
    print("=" * 70)
    print("")
    print("üì° Servidor: http://0.0.0.0:8000")
    print("üìö Documenta√ß√£o: http://localhost:8000/docs")
    print("üìñ Redoc: http://localhost:8000/redoc")
    print("")
    print("üí° Pressione CTRL+C para parar")
    print("=" * 70)
    print("")

    uvicorn.run(
        "app.main:app",  # CORRETO: m√≥dulo completo
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )
