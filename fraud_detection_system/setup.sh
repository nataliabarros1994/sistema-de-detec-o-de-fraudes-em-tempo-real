#!/bin/bash

# ===================================================================
# Script de Setup Autom√°tico - Sistema de Detec√ß√£o de Fraudes
# ===================================================================
# Este script automatiza todo o processo de instala√ß√£o e setup
# do sistema de detec√ß√£o de fraudes.
#
# Uso:
#   chmod +x setup.sh
#   ./setup.sh
#
# Autor: Nat√°lia Barros
# Data: 2025
# ===================================================================

set -e  # Para em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√µes de utilidade
print_header() {
    echo ""
    echo -e "${BLUE}============================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}============================================================${NC}"
    echo ""
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${YELLOW}‚ÑπÔ∏è  $1${NC}"
}

print_step() {
    echo -e "${BLUE}‚ñ∂ $1${NC}"
}

# Verificar requisitos
check_requirements() {
    print_header "VERIFICANDO REQUISITOS"

    # Python
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
        print_success "Python encontrado: $PYTHON_VERSION"
    else
        print_error "Python 3 n√£o encontrado!"
        print_info "Instale Python 3.10+ e tente novamente"
        exit 1
    fi

    # Docker
    if command -v docker &> /dev/null; then
        DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
        print_success "Docker encontrado: $DOCKER_VERSION"
    else
        print_error "Docker n√£o encontrado!"
        print_info "Instale Docker Desktop e tente novamente"
        exit 1
    fi

    # Docker Compose
    if command -v docker-compose &> /dev/null; then
        COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f4 | cut -d',' -f1)
        print_success "Docker Compose encontrado: $COMPOSE_VERSION"
    else
        print_error "Docker Compose n√£o encontrado!"
        print_info "Instale Docker Compose e tente novamente"
        exit 1
    fi
}

# Criar ambiente virtual
create_venv() {
    print_header "CONFIGURANDO AMBIENTE VIRTUAL"

    if [ -d "venv" ]; then
        print_info "Ambiente virtual j√° existe"
        read -p "Deseja recriar? (s/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Ss]$ ]]; then
            print_step "Removendo ambiente virtual antigo..."
            rm -rf venv
        else
            print_info "Mantendo ambiente virtual existente"
            return
        fi
    fi

    print_step "Criando novo ambiente virtual..."
    python3 -m venv venv

    print_success "Ambiente virtual criado!"
}

# Instalar depend√™ncias
install_dependencies() {
    print_header "INSTALANDO DEPEND√äNCIAS"

    print_step "Ativando ambiente virtual..."

    # Detecta o sistema operacional
    if [[ "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
        source venv/Scripts/activate
    else
        source venv/bin/activate
    fi

    print_step "Atualizando pip..."
    pip install --upgrade pip --quiet

    print_step "Instalando depend√™ncias do projeto..."
    pip install -r requirements.txt --quiet

    print_success "Depend√™ncias instaladas!"
}

# Iniciar Redis
start_redis() {
    print_header "INICIANDO REDIS"

    print_step "Verificando se Redis j√° est√° rodando..."

    if docker ps | grep -q "fraud-detection-redis"; then
        print_info "Redis j√° est√° rodando"
    else
        print_step "Iniciando container Redis..."
        docker-compose up -d redis

        print_step "Aguardando Redis inicializar..."
        sleep 5

        if docker ps | grep -q "fraud-detection-redis"; then
            print_success "Redis iniciado com sucesso!"
        else
            print_error "Falha ao iniciar Redis"
            exit 1
        fi
    fi
}

# Treinar modelo
train_model() {
    print_header "TREINANDO MODELO DE MACHINE LEARNING"

    if [ -f "models/fraud_model.pkl" ]; then
        print_info "Modelo j√° existe"
        read -p "Deseja retreinar? (s/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Ss]$ ]]; then
            print_info "Mantendo modelo existente"
            return
        fi
    fi

    print_step "Gerando dados sint√©ticos e treinando modelo..."
    print_info "Isso pode levar 1-2 minutos..."

    python training/train_model.py

    if [ -f "models/fraud_model.pkl" ]; then
        print_success "Modelo treinado e salvo!"
    else
        print_error "Falha no treinamento do modelo"
        exit 1
    fi
}

# Resumo final
print_summary() {
    print_header "INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!"

    echo -e "${GREEN}üéâ O sistema est√° pronto para uso!${NC}"
    echo ""
    echo -e "${BLUE}Pr√≥ximos passos:${NC}"
    echo ""
    echo "1Ô∏è‚É£  Ativar o ambiente virtual:"
    echo "   source venv/bin/activate"
    echo ""
    echo "2Ô∏è‚É£  Iniciar a API:"
    echo "   python -m app.main"
    echo ""
    echo "3Ô∏è‚É£  Acessar a documenta√ß√£o interativa:"
    echo "   http://localhost:8000/docs"
    echo ""
    echo -e "${BLUE}Documenta√ß√£o:${NC}"
    echo "   üìñ README.md - Guia completo"
    echo "   ‚ö° QUICKSTART.md - In√≠cio r√°pido"
    echo "   üí° EXAMPLES.md - Exemplos pr√°ticos"
    echo ""
    echo -e "${BLUE}Comandos √∫teis:${NC}"
    echo "   ‚Ä¢ Ver status: docker-compose ps"
    echo "   ‚Ä¢ Ver logs Redis: docker-compose logs redis"
    echo "   ‚Ä¢ Parar Redis: docker-compose down"
    echo "   ‚Ä¢ Avaliar modelo: python training/evaluate_model.py"
    echo ""
    echo -e "${GREEN}Desenvolvido com ‚ù§Ô∏è por Nat√°lia Barros${NC}"
    echo ""
}

# Fun√ß√£o principal
main() {
    clear

    cat << "EOF"
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                            ‚ïë
    ‚ïë   üöÄ Sistema de Detec√ß√£o de Fraudes em Tempo Real üöÄ      ‚ïë
    ‚ïë                                                            ‚ïë
    ‚ïë             Script de Instala√ß√£o Autom√°tica                ‚ïë
    ‚ïë                                                            ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

EOF

    print_info "Este script ir√° configurar todo o ambiente automaticamente"
    echo ""

    read -p "Deseja continuar? (S/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        print_info "Instala√ß√£o cancelada"
        exit 0
    fi

    # Executar passos
    check_requirements
    create_venv
    install_dependencies
    start_redis
    train_model
    print_summary
}

# Tratamento de erros
trap 'print_error "Erro durante a instala√ß√£o. Verifique as mensagens acima."; exit 1' ERR

# Executar
main
